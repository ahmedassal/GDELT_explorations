dataFullPath = paste0(workingDir, relDataPath)
baseEventsFilename = "20130630.export"
reducedEventsFile = "GDELT.MASTERREDUCEDV2.txt"
paths = list(workingDir= workingDir, relDataPath = relDataPath, dataFullPath = dataFullPath,
reducedEventsFile = reducedEventsFile)
globals$paths = paths
rm(paths, workingDir, relDataPath, dataFullPath, reducedEventsFile)
strStartDate <- "2013-04-01"
#strStartDate <- "2014-01-26"
strEndDate <- "2013-05-01"
# strEndDate <- "2014-01-22"
#strEndDate <- "2015-04-16"
dates = list(strStartDate = strStartDate,strEndDate = strEndDate )
globals$dates = dates
rm(strEndDate, strEndDate, dates)
eventsDataFilenames <- createEventsDataFilenames(strStartDate = globals$dates$strStartDate, strEndDate = globals$dates$strEndDate, relDataPath = globals$paths$relDataPath, workingPath = globals$paths$workingDir )
globals$paths$eventsDataFilenames = eventsDataFilenames
rm(eventsDataFilenames)
gc()
# globals -----------------------------------------------------------------
protestCAMEOCodes = c("140",
"141", "1411", "1412", "1413", "1414",
"142", "1421", "1422", "1423", "1424",
"143", "1431", "1432", "1433", "1434",
"144", "1441", "1442", "1443", "1444",
"145", "1451", "1452", "1453", "1454")
# Preprocessing Data #
gc()
# loading data
# reducedEventsFile = paste0(globals$paths$dataFullPath, "/", globals$paths$reducedEventsFile)
nrow(globals$paths$eventsDataFilenames)
# Original Data Loading ---------------------------------------------------
# events = data.table()
# i <- 1
# for(eventsDataFilename in globals$paths$eventsDataFilenames[,2]){
#       print(paste0("#",i, "/", nrow(globals$paths$eventsDataFilenames), " ", eventsDataFilename))
#       events = rbind(events, fread(as.character(eventsDataFilename),
#                      nrows = -1, header = FALSE, colClasses = dailyEventsColClassesV1_03))
#       i= i + 1
#       if(i %% 50 == 0){
#             gc()
#       }
#
#
# }
# Temp Data Loading ---------------------------------------------------
events = data.table()
i <- 1
for(eventsDataFilename in globals$paths$eventsDataFilenames[,2]){
print(paste0("#",i, "/", nrow(globals$paths$eventsDataFilenames), " ", eventsDataFilename))
tempEvents = fread(as.character(eventsDataFilename),
nrows = -1, header = FALSE, colClasses = dailyEventsColClassesV1_03)
if (i == 1){
headers = dailyEventsColNamesV1_03
setnames(tempEvents, headers)
}
involvingEGYBase = filter(
tempEvents,
grepl("EGY", events$Actor1Code, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", events$Actor1Name, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", events$Actor1CountryCode, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", events$Actor2Code, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", events$Actor2Name, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", events$Actor2CountryCode, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", events$ActionGeo_CountryCode, ignore.case = TRUE, fixed = TRUE)
)
if (i == 1){
events = involvingEGYBase
}else{
events = rbindlist(list(events, involvingEGYBase), use.names = TRUE, fill = TRUE)
}
if(i %% 50 == 0){
gc()
}
i= i + 1
}
headers = dailyEventsColNamesV1_03
setnames(events, headers)
setnames(events, headers)
debugSource('D:/0Formal Education/Data Incubator/Challenge/project_proposal/experiments_with_events.R', echo=TRUE)
debugSource('D:/0Formal Education/Data Incubator/Challenge/project_proposal/experiments_with_events.R', echo=TRUE)
debugSource('D:/0Formal Education/Data Incubator/Challenge/project_proposal/experiments_with_events.R', echo=TRUE)
source('D:/0Formal Education/Data Incubator/Challenge/project_proposal/experiments_with_events.R', echo=TRUE)
source('D:/0Formal Education/Data Incubator/Challenge/project_proposal/experiments_with_events.R', echo=TRUE)
View(events)
source('D:/0Formal Education/Data Incubator/Challenge/project_proposal/experiments_with_events.R', echo=TRUE)
source('D:/0Formal Education/Data Incubator/Challenge/project_proposal/experiments_with_events.R', echo=TRUE)
source('D:/0Formal Education/Data Incubator/Challenge/project_proposal/experiments_with_events.R', echo=TRUE)
# Cleanup -----------------------------------------------------------------
rm(list = ls())
gc()
# Setup #
workingDir = "D:/0Formal Education/Data Incubator/Challenge/project_proposal"
setwd(workingDir)
source("helpers.R")
source("GDELT_events_columns_definition.R")
# Setup -------------------------------------------------------------------
packages = c("data.table", "dplyr", "doParallel", "lubridate", "ggplot2", "RgoogleMaps",
"ggmap", "mapproj")
globals = list(packages = packages)
rm(packages)
setup_packages(globals$packages)
cl = options(cores=12)
registerDoParallel(cl)
globals$parallel = list(cl=cl)
rm(cl)
# Paths and Urls ----------------------------------------------------------
# dataPath = "D:/0Formal Education/Data Incubator/Challenge/project_proposal/data"
relDataPath = "/data"
dataFullPath = paste0(workingDir, relDataPath)
baseEventsFilename = "20130630.export"
reducedEventsFile = "GDELT.MASTERREDUCEDV2.txt"
paths = list(workingDir= workingDir, relDataPath = relDataPath, dataFullPath = dataFullPath,
reducedEventsFile = reducedEventsFile)
globals$paths = paths
rm(paths, workingDir, relDataPath, dataFullPath, reducedEventsFile)
strStartDate <- "2013-04-01"
#strStartDate <- "2014-01-26"
strEndDate <- "2013-05-01"
# strEndDate <- "2014-01-22"
#strEndDate <- "2015-04-16"
dates = list(strStartDate = strStartDate,strEndDate = strEndDate )
globals$dates = dates
rm(strEndDate, strEndDate, dates)
eventsDataFilenames <- createEventsDataFilenames(strStartDate = globals$dates$strStartDate, strEndDate = globals$dates$strEndDate, relDataPath = globals$paths$relDataPath, workingPath = globals$paths$workingDir )
globals$paths$eventsDataFilenames = eventsDataFilenames
rm(eventsDataFilenames)
gc()
# globals -----------------------------------------------------------------
protestCAMEOCodes = c("140",
"141", "1411", "1412", "1413", "1414",
"142", "1421", "1422", "1423", "1424",
"143", "1431", "1432", "1433", "1434",
"144", "1441", "1442", "1443", "1444",
"145", "1451", "1452", "1453", "1454")
# Preprocessing Data #
gc()
# loading data
# reducedEventsFile = paste0(globals$paths$dataFullPath, "/", globals$paths$reducedEventsFile)
nrow(globals$paths$eventsDataFilenames)
# Original Data Loading ---------------------------------------------------
# events = data.table()
# i <- 1
# for(eventsDataFilename in globals$paths$eventsDataFilenames[,2]){
#       print(paste0("#",i, "/", nrow(globals$paths$eventsDataFilenames), " ", eventsDataFilename))
#       events = rbind(events, fread(as.character(eventsDataFilename),
#                      nrows = -1, header = FALSE, colClasses = dailyEventsColClassesV1_03))
#       i= i + 1
#       if(i %% 50 == 0){
#             gc()
#       }
#
#
# }
# Temp Data Loading ---------------------------------------------------
i <- 1
for(eventsDataFilename in globals$paths$eventsDataFilenames[,2]){
print(paste0("#",i, "/", nrow(globals$paths$eventsDataFilenames), " ", eventsDataFilename))
tempEvents = fread(as.character(eventsDataFilename),
nrows = -1, header = FALSE, colClasses = dailyEventsColClassesV1_03)
#       if (i == 1){
headers = dailyEventsColNamesV1_03
setnames(tempEvents, headers)
#       }
involvingEGYBase = filter(
tempEvents,
grepl("EGY", tempEvents$Actor1Code, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", tempEvents$Actor1Name, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", tempEvents$Actor1CountryCode, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", tempEvents$Actor2Code, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", tempEvents$Actor2Name, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", tempEvents$Actor2CountryCode, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", tempEvents$ActionGeo_CountryCode, ignore.case = TRUE, fixed = TRUE)
)
if (i == 1){
involvingEGY = involvingEGYBase
}else{
involvingEGY = rbindlist(list(involvingEGY, involvingEGYBase), use.names = TRUE)
}
if(i %% 100 == 0){
gc()
saveRDS(involvingEGY, file = "involving_egypt.rds")
}
i= i + 1
}
headers = dailyEventsColNamesV1_03
setnames(involvingEGY, headers)
gc()
saveRDS(involvingEGY, file = "involving_egypt.rds")
source('D:/0Formal Education/Data Incubator/Challenge/project_proposal/experiments_with_events.R', echo=TRUE)
i
strStartDate <- "2014-01-26"
# strEndDate <- "2013-05-01"
# strEndDate <- "2014-01-22"
strEndDate <- "2015-04-16"
dates = list(strStartDate = strStartDate,strEndDate = strEndDate )
globals$dates = dates
rm(strEndDate, strEndDate, dates)
eventsDataFilenames <- createEventsDataFilenames(strStartDate = globals$dates$strStartDate, strEndDate = globals$dates$strEndDate, relDataPath = globals$paths$relDataPath, workingPath = globals$paths$workingDir )
globals$paths$eventsDataFilenames = eventsDataFilenames
rm(eventsDataFilenames)
gc()
nrow(globals$paths$eventsDataFilenames)
for(eventsDataFilename in globals$paths$eventsDataFilenames[,2]){
print(paste0("#",i, "/", nrow(globals$paths$eventsDataFilenames), " ", eventsDataFilename))
tempEvents = fread(as.character(eventsDataFilename),
nrows = -1, header = FALSE, colClasses = dailyEventsColClassesV1_03)
#       if (i == 1){
headers = dailyEventsColNamesV1_03
setnames(tempEvents, headers)
#       }
involvingEGYBase = filter(
tempEvents,
grepl("EGY", tempEvents$Actor1Code, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", tempEvents$Actor1Name, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", tempEvents$Actor1CountryCode, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", tempEvents$Actor2Code, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", tempEvents$Actor2Name, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", tempEvents$Actor2CountryCode, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", tempEvents$ActionGeo_CountryCode, ignore.case = TRUE, fixed = TRUE)
)
if (i == 1){
involvingEGY = involvingEGYBase
}else{
involvingEGY = rbindlist(list(involvingEGY, involvingEGYBase), use.names = TRUE)
}
if(i %% 100 == 0){
gc()
saveRDS(involvingEGY, file = "involving_egypt.rds")
}
i= i + 1
}
headers = dailyEventsColNamesV1_03
setnames(involvingEGY, headers)
gc()
saveRDS(involvingEGY, file = "involving_egypt.rds")
strStartDate <- "2014-03-20"
# strEndDate <- "2013-05-01"
# strEndDate <- "2014-01-22"
strEndDate <- "2015-04-16"
dates = list(strStartDate = strStartDate,strEndDate = strEndDate )
globals$dates = dates
rm(strEndDate, strEndDate, dates)
eventsDataFilenames <- createEventsDataFilenames(strStartDate = globals$dates$strStartDate, strEndDate = globals$dates$strEndDate, relDataPath = globals$paths$relDataPath, workingPath = globals$paths$workingDir )
globals$paths$eventsDataFilenames = eventsDataFilenames
rm(eventsDataFilenames)
gc()
nrow(globals$paths$eventsDataFilenames)
for(eventsDataFilename in globals$paths$eventsDataFilenames[,2]){
print(paste0("#",i, "/", nrow(globals$paths$eventsDataFilenames), " ", eventsDataFilename))
tempEvents = fread(as.character(eventsDataFilename),
nrows = -1, header = FALSE, colClasses = dailyEventsColClassesV1_03)
#       if (i == 1){
headers = dailyEventsColNamesV1_03
setnames(tempEvents, headers)
#       }
involvingEGYBase = filter(
tempEvents,
grepl("EGY", tempEvents$Actor1Code, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", tempEvents$Actor1Name, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", tempEvents$Actor1CountryCode, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", tempEvents$Actor2Code, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", tempEvents$Actor2Name, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", tempEvents$Actor2CountryCode, ignore.case = TRUE, fixed = TRUE)
|
grepl("EGY", tempEvents$ActionGeo_CountryCode, ignore.case = TRUE, fixed = TRUE)
)
if (i == 1){
involvingEGY = involvingEGYBase
}else{
involvingEGY = rbindlist(list(involvingEGY, involvingEGYBase), use.names = TRUE)
}
if(i %% 100 == 0){
gc()
saveRDS(involvingEGY, file = "involving_egypt.rds")
}
i= i + 1
}
headers = dailyEventsColNamesV1_03
setnames(involvingEGY, headers)
gc()
saveRDS(involvingEGY, file = "involving_egypt.rds")
# Cleanup -----------------------------------------------------------------
rm(list = ls())
gc()
# Setup #
workingDir = "D:/0Formal Education/Data Incubator/Challenge/project_proposal"
setwd(workingDir)
source("helpers.R")
source("GDELT_events_columns_definition.R")
# Setup -------------------------------------------------------------------
packages = c("data.table", "dplyr", "doParallel", "lubridate", "ggplot2", "RgoogleMaps",
"ggmap", "mapproj")
globals = list(packages = packages)
rm(packages)
setup_packages(globals$packages)
cl = options(cores=12)
registerDoParallel(cl)
globals$parallel = list(cl=cl)
rm(cl)
involvingEGY = readRDS(file = "involving_egypt.rds")
# Paths and Urls ----------------------------------------------------------
# dataPath = "D:/0Formal Education/Data Incubator/Challenge/project_proposal/data"
relDataPath = "/data"
dataFullPath = paste0(workingDir, relDataPath)
baseEventsFilename = "20130630.export"
reducedEventsFile = "GDELT.MASTERREDUCEDV2.txt"
paths = list(workingDir= workingDir, relDataPath = relDataPath, dataFullPath = dataFullPath,
reducedEventsFile = reducedEventsFile)
globals$paths = paths
rm(paths, workingDir, relDataPath, dataFullPath, reducedEventsFile)
# strStartDate <- "2013-04-01"
# strStartDate <- "2014-01-26"
strStartDate <- "2014-03-20"
# strEndDate <- "2013-05-01"
# strEndDate <- "2014-01-22"
strEndDate <- "2015-04-16"
dates = list(strStartDate = strStartDate,strEndDate = strEndDate )
globals$dates = dates
rm(strEndDate, strEndDate, dates)
eventsDataFilenames <- createEventsDataFilenames(strStartDate = globals$dates$strStartDate, strEndDate = globals$dates$strEndDate, relDataPath = globals$paths$relDataPath, workingPath = globals$paths$workingDir )
globals$paths$eventsDataFilenames = eventsDataFilenames
rm(eventsDataFilenames)
gc()
# globals -----------------------------------------------------------------
protestCAMEOCodes = c("140",
"141", "1411", "1412", "1413", "1414",
"142", "1421", "1422", "1423", "1424",
"143", "1431", "1432", "1433", "1434",
"144", "1441", "1442", "1443", "1444",
"145", "1451", "1452", "1453", "1454")
# Preprocessing Data ------------------------------------------------------
gc()
# loading data
# reducedEventsFile = paste0(globals$paths$dataFullPath, "/", globals$paths$reducedEventsFile)
nrow(globals$paths$eventsDataFilenames)
protestsEGY = filter(involvingEGYBase,
EventCode %in% protestCAMEOCodes)
# verbalCooperation = filter(reducedEvents, QuadClass == 1)
# materialCooperation = filter(reducedEvents, QuadClass == 2)
# verbalConflict = filter(reducedEvents, QuadClass == 3)
# materialConflict = filter(reducedEvents, QuadClass == 4)
# rm(verbalCooperation, materialCooperation, verbalConflict, materialConflict)
protestsEGY = filter(involvingEGY,
EventCode %in% protestCAMEOCodes)
distinct(involvingEGY$EventCode)
distinct(involvingEGY)
unique(involvingEGY$EventCode)
table(unique(involvingEGY$EventCode))
table(involvingEGY$EventCode)
dfInvolvingEGY <- data.frame(table(factor(involvingEGY$EventCode)))
ggplot(dfInvolvingEGY, aes(x = Var1, y = Freq)) + geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
table(factor(involvingEGY$EventCode)
table(factor(involvingEGY$EventCode))
t=table(factor(involvingEGY$EventCode))
str(t)
t[1]
quantile
quantile(x = t, probs = 0.5)
t[which( t > quantile(x = t, probs = 0.25))]
plotData = t[which( t > quantile(x = t, probs = 0.25))]
plotData = t[which( t > quantile(x = plotData, probs = 0.25))]
dfInvolvingEGY <- data.frame()
ggplot(dfInvolvingEGY, aes(x = Var1, y = Freq)) + geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotData = t[which( t > quantile(x = plotData, probs = 0.25))]
dfInvolvingEGY <- data.frame(plotData)
ggplot(dfInvolvingEGY, aes(x = Var1, y = Freq)) + geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotData
class(plotData)
dfInvolvingEGY <- data.frame(plotData)
ggplot(dfInvolvingEGY, aes(x = Var1, y = Freq)) + geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
names(t)
names(plotData) = names(t)
?table
dfInvolvingEgypt <- data.frame(table(year(involvingEGY$Date)))
ggplot(dfInvolvingEgypt, aes(x = Var1, y = Freq)) + geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dfInvolvingEgypt <- data.frame(table(year(involvingEGY$Day)))
ggplot(dfInvolvingEgypt, aes(x = Var1, y = Freq)) + geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dfInvolvingEgypt <- data.frame(table(year(involvingEGY$Day)))
dfInvolvingEgyptLatLong <-
involvingEGY %>%
group_by(ActionGeo_Lat, ActionGeo_Long) %>%
summarise(count = n())
dfprotestsEGYLatLong <-
protestsEGY %>%
group_by(ActionGeo_Lat, ActionGeo_Long) %>%
summarise(count = n())
lat <- c(22.000000, 31.674179)
lon <- c(24.698099, 36.894680)
center = c(lat = mean(lat), lon = mean(lon))
zoom <- min(MaxZoom(range(lat), range(lon)))
map <- get_map(location = c(lon = mean(lon), lat = mean(lat)), zoom = zoom, maptype = "terrain",
source = "google", scale = 4)
print(ggmap(map) + geom_point(data = dfInvolvingEgyptLatLong,
aes(x = ActionGeoLong, y = ActionGeoLat, size = count),
alpha = 0.70, pch = 21, colour = "red") +
scale_size(range = c(4, 10)) )
print(ggmap(map) + geom_point(data = dfInvolvingEgyptLatLong,
aes(x = ActionGeo_Long, y = ActionGeo_Lat, size = count),
alpha = 0.70, pch = 21, colour = "red") +
scale_size(range = c(4, 10)) )
print(ggmap(map) + geom_point(data = dfInvolvingEgyptLatLong,
aes(x = ActionGeo_Long, y = ActionGeo_Lat, size = count),
alpha = 0.70, pch = 21, colour = "red") +
)
print(ggmap(map) + geom_point(data = dfInvolvingEgyptLatLong,
aes(x = ActionGeo_Long, y = ActionGeo_Lat, size = count),
alpha = 0.70, pch = 21, colour = "red")  )
dfInvolvingEgyptLatLong <-
involvingEGY %>%
group_by(ActionGeo_Lat, ActionGeo_Long) %>%
summarise(count = n())
print(ggmap(map) + geom_point(data = dfInvolvingEgyptLatLong,
aes(x = ActionGeo_Long, y = ActionGeo_Lat, size = count),
alpha = 0.70, pch = 21, colour = "red") +
scale_size(range = c(4, 10)) )
print(ggmap(map) + geom_point(data = dfprotestsEGYLatLong,
aes(x = ActionGeo_Long, y = ActionGeo_Lat, size = count),
alpha = 0.70, pch = 21, colour = "red") +
scale_size(range = c(4, 10)) )
print(ggmap(map) + geom_point(data = dfprotestsEGYLatLong,
aes(x = as.numeric(ActionGeo_Long), y = as.numeric(ActionGeo_Lat), size = count),
alpha = 0.70, pch = 21, colour = "red") +
scale_size(range = c(4, 10)) )
print(ggmap(map) + geom_point(data = dfInvolvingEgyptLatLong,
aes(x = as.numeric(ActionGeo_Long), y = as.numeric(ActionGeo_Lat), size = count),
alpha = 0.70, pch = 21, colour = "red") +
scale_size(range = c(4, 10)) )
print(ggmap(map) + geom_point(data = dfprotestsEGYLatLong,
aes(x = as.numeric(ActionGeo_Long), y = as.numeric(ActionGeo_Lat), size = count),
alpha = 0.70, pch = 21, colour = "black") +
scale_size(range = c(4, 10)) )
print(ggmap(map) + geom_point(data = dfprotestsEGYLatLong,
aes(x = as.numeric(ActionGeo_Long), y = as.numeric(ActionGeo_Lat), size = count),
alpha = 0.70, pch = 21, colour = "red") +
scale_size(range = c(4, 10)) )
print(ggmap(map) + geom_point(data = dfprotestsEGYLatLong,
aes(x = as.numeric(ActionGeo_Long), y = as.numeric(ActionGeo_Lat), size = count),
alpha = 0.70, pch = 22, colour = "red") +
scale_size(range = c(4, 10)) )
print(ggmap(map) + geom_point(data = dfprotestsEGYLatLong,
aes(x = as.numeric(ActionGeo_Long), y = as.numeric(ActionGeo_Lat), size = count),
alpha = 0.70, pch = 22, colour = "red") +
scale_size(range = c(2, 10)) )
?normalize
??normalize
?summarize
dfprotestsEGYLatLong <-
protestsEGY %>%
group_by(ActionGeo_Lat, ActionGeo_Long) %>%
summarise(freq = n() ) %>%
summarize(freq = freq / sum(freq))
View(dfprotestsEGYLatLong)
dfprotestsEGYLatLong <-
protestsEGY %>%
group_by(ActionGeo_Lat, ActionGeo_Long) %>%
summarise(count = n() ) %>%
mutate(freq = count / sum(count)) %>%
as.rel_freq()
dfprotestsEGYLatLong <-
protestsEGY %>%
group_by(ActionGeo_Lat, ActionGeo_Long) %>%
summarise(count = n() ) %>%
mutate(freq = count / sum(count))
print(ggmap(map) + geom_point(data = dfprotestsEGYLatLong,
aes(x = as.numeric(ActionGeo_Long), y = as.numeric(ActionGeo_Lat), size = count),
alpha = 0.70, pch = 22, colour = "red") +
scale_size(range = c(2, 10)) )
print(ggmap(map) + geom_point(data = dfprotestsEGYLatLong,
aes(x = as.numeric(ActionGeo_Long), y = as.numeric(ActionGeo_Lat), size = freq),
alpha = 0.70, pch = 22, colour = "red") +
scale_size(range = c(2, 10)) )
View(dfprotestsEGYLatLong)
dfprotestsEGYLatLong <-
protestsEGY %>%
group_by(ActionGeo_Lat, ActionGeo_Long) %>%
summarise(count = n() ) %>%
mutate(freq = count / nrow(protestsEGY))
print(ggmap(map) + geom_point(data = dfprotestsEGYLatLong,
aes(x = as.numeric(ActionGeo_Long), y = as.numeric(ActionGeo_Lat), size = freq),
alpha = 0.70, pch = 22, colour = "red") +
scale_size(range = c(2, 10)) )
View(protestsEGY)
